{"version":3,"sources":["imagenes/principal1.jpeg","imagenes/LogoJunta.jpeg","siguiente.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","type","value","class","to","path","src","logo","alt","href","target","rel","principal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,wNCwD5BC,MA5Cf,WACE,OACE,yBAAKC,UAAU,OAEb,4BAAQA,UAAU,cAClB,6BACA,8CACA,6BACA,8BACA,6BACF,yCACA,6BACC,2BAAOC,KAAK,OAAOC,MAAM,sBACzB,6BACA,2CACA,6BACA,2BAAOD,KAAK,OAAOC,MAAM,qBACzB,6BACA,kDACA,6BACA,mCACA,6BACA,2BAAOD,KAAK,SAASC,MAAM,SAASC,MAAM,YAK1C,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAMC,GAAG,KAAT,UAGC,kBAAC,IAAD,KAEA,kBAAC,IAAD,CAAOC,KAAK,WACZ,kBAAC,EAAD,WCOSN,MAxCf,WAGE,OACE,kBAAC,IAAD,KACA,yBAAKC,UAAU,OAGb,4BAAQA,UAAU,cAClB,0CACE,yBAAKM,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACER,UAAU,WACVS,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBAUF,kBAAC,IAAD,CAAMP,GAAG,cAAT,iBAGA,kBAAC,IAAD,KAEA,kBAAC,IAAD,CAAOC,KAAK,cACV,kBAAC,EAAD,QAGF,yBAAKC,IAAKM,IAAWZ,UAAU,GAAGQ,IAAI,YClCxBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ce26aa7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/principal1.0290c48b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/LogoJunta.91e96f67.jpeg\";","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport {Component} from 'react';\nimport { BrowserRouter, Route, Switch, Redirect, Link } from 'react-router-dom';\n\nimport principal from './imagenes/principal1.jpeg';\nimport logo from './imagenes/LogoJunta.jpeg';\nimport Volver from './App.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n      <br></br>\n      <h1>Matriculate ya</h1>\n      <br></br>\n      <form>\n      <br></br>\n    <label>Nombre</label>\n    <br></br>\n     <input type=\"text\" value=\"ingrese su nombre\"></input>\n     <br></br>\n     <label>Apellido</label>\n     <br></br>\n     <input type=\"text\" value=\"Ingrese Apellido\"></input>\n     <br></br>\n     <label>Ingrese Mensaje</label>\n     <br></br>\n     <textarea ></textarea>\n     <br></br>\n     <input type=\"button\" value=\"Enviar\" class=\"boton\"></input>\n\n\n     </form>\n     </header>\n     <BrowserRouter>\n     <Link to=\"/\">Volver</Link>\n      \n\n      <Switch>\n\n      <Route path='/Volver'>\n      <Volver/>\n      </Route>\n      </Switch>\n      </BrowserRouter>\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport {Component} from 'react';\nimport { BrowserRouter, Route, Switch, Redirect, Link } from 'react-router-dom';\nimport { Router} from 'react-router';\n\nimport principal from './imagenes/principal1.jpeg';\nimport logo from './imagenes/LogoJunta.jpeg';\nimport Siguiente from './siguiente.js';\n\n\nfunction App() {\n\n  \n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      \n      \n      <header className=\"App-header\">\n      <h1>Hola mundo</h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      \n      <Link to=\"/siguiente\">Quienes Somos</Link>\n      \n\n      <Switch>\n\n      <Route path='/siguiente'>\n        <Siguiente/>\n      </Route>\n      </Switch>\n      <img src={principal} className=\"\" alt=\"logo\" />\n      \n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Switch, Redirect, Link } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}